apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(':jpermission_lib')
}

//project.afterEvaluate {
//        def classpath = '/Users/jianbo/AndroidStudioProjects/JPermission/testlibrary/build/tmp/kotlin-classes/debug'
//        File file = new File(classpath)
//        file.listFiles().each {
//            println "\n~~~~···file inpath:${getFile(it).name}"
//
//        }
//}
//android.libraryVariants.all { variant ->
//    JavaCompile javaCompile = variant.javaCompile
//    def classpath = '/Users/jianbo/AndroidStudioProjects/JPermission/testlibrary/build/tmp/kotlin-classes/debug'
//
//    variant.variantData.extraGeneratedSourceFolders.each {
//        source it
//    }
//    variant.variantData.javaSources.each {
//        if (it instanceof File) {
//            println "\n~~~~···file inpath:${getFile(it).name}"
//        } else {
//            it.asFileTrees.each {
//                println "\n~~~~···file inpath:${getFile(it).name}"
//            }
//        }
//    }
//
//    javaCompile.doLast {
//
//        File file = new File(classpath)
//        file.listFiles().each {
//            println "\n~~~~···file inpath:${getFile(it).name}"
//
//        }
//
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", classpath,
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", android.bootClasspath.join(
//                File.pathSeparator)]
//        println "\n~~~~···libraryVariants inpath:${javaCompile.destinationDir.toString()}"
//        println "\n~~~~···libraryVariants aspectpath:${javaCompile.classpath.asPath}"
//        println "\n~~~~···libraryVariants d:${javaCompile.destinationDir.toString()}"
//        println "\n~~~~···libraryVariants classpath:${javaCompile.classpath.asPath}"
//        MessageHandler handler = new MessageHandler(true)
//        new Main().run(args, handler)
//
//        def log = project.logger
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break
//                case IMessage.WARNING:
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break
//            }
//        }
//    }
//}
//
File getFile(File file) {
    File file1 = file
    if (file1.isDirectory()) {
        file1.listFiles().each {
            file1 =  getFile(it)
        }
    }
    return file1
}

